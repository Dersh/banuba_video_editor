// Autogenerated from Pigeon (v1.0.12), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.levl.banuba.banuba_video_editor;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class BanubaVideoEditorPluginApi {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class VideoEditResult {
    private String filepath;
    public String getFilepath() { return filepath; }
    public void setFilepath(String setterArg) { this.filepath = setterArg; }

    private String coverPath;
    public String getCoverPath() { return coverPath; }
    public void setCoverPath(String setterArg) { this.coverPath = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("filepath", filepath);
      toMapResult.put("coverPath", coverPath);
      return toMapResult;
    }
    static VideoEditResult fromMap(Map<String, Object> map) {
      VideoEditResult fromMapResult = new VideoEditResult();
      Object filepath = map.get("filepath");
      fromMapResult.filepath = (String)filepath;
      Object coverPath = map.get("coverPath");
      fromMapResult.coverPath = (String)coverPath;
      return fromMapResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class BanubaVideoEditorApiCodec extends StandardMessageCodec {
    public static final BanubaVideoEditorApiCodec INSTANCE = new BanubaVideoEditorApiCodec();
    private BanubaVideoEditorApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return VideoEditResult.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof VideoEditResult) {
        stream.write(128);
        writeValue(stream, ((VideoEditResult) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface BanubaVideoEditorApi {
    void startEditorFromCamera(Result<VideoEditResult> result);

    /** The codec used by BanubaVideoEditorApi. */
    static MessageCodec<Object> getCodec() {
      return BanubaVideoEditorApiCodec.INSTANCE;
    }

    /** Sets up an instance of `BanubaVideoEditorApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, BanubaVideoEditorApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BanubaVideoEditorApi.startEditorFromCamera", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<VideoEditResult> resultCallback = new Result<VideoEditResult>() {
                public void success(VideoEditResult result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.startEditorFromCamera(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
